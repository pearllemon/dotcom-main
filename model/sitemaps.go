package model

import (
	"fmt"
	"math"
	"strings"

	_ "github.com/lib/pq"
)

func SitemapIndex() (content string, err error) {
	var count int
	err = PgsqlDB.Model(&Pet{Status: uint(1)}).
		Count(&count).Error
	if err != nil {
		return "", err
	}

	nbSitemaps, _ := count/1000, math.Remainder(float64(count), float64(1000))
	nbSitemaps = nbSitemaps + 1

	templateUrl := `
	<sitemap>
		<loc>%s/sitemap-part/part-%d.xml</loc>
	</sitemap>
`
	headerFile := `<?xml version="1.0" encoding="UTF-8"?>
<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
	`
	footerFile := `
</sitemapindex>`

	res := ""
	for m := 1; m <= nbSitemaps; m++ {
		s := fmt.Sprintf(templateUrl, AppURL, m)
		res = res + s
	}
	content = fmt.Sprintf("%s %s %s", headerFile, res, footerFile)
	return
}

func SitemapPart(part int) (content string, err error) {
	var pets []Pet
	err = PgsqlDB.Limit(1000).
		Order("id ASC").Offset((part - 1) * 1000).Find(&pets).Error
	if err != nil {
		return "", err
	}

	microchips := make([]string, len(pets))
	for i, pet := range pets {
		microchips[i] = pet.Microchip
	}

	return SitemapFromList(microchips)
}

func SitemapFromList(microchips []string) (string, error) {
	templateHead := `<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated By Said -->
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`
	templateTr := `<url>
	<loc>https://www.savethislife.com/%s</loc>
	<changefreq>daily</changefreq>
	<priority>0.5</priority>
</url>`
	templateFooter := `</urlset>`

	sitemap := templateHead

	for _, microchip := range microchips {

		microchip = strings.TrimSpace(microchip)
		if err := CheckValidMicrochip(microchip); err != nil {
			// not a microchip so ignore it
			continue
		}

		sitemap = fmt.Sprintf("%s\n%s", sitemap,
			fmt.Sprintf(templateTr, microchip))
	}

	sitemap = fmt.Sprintf("%s\n%s", sitemap, templateFooter)

	return sitemap, nil
}
